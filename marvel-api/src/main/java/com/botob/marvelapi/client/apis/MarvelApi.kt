/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Cable
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.botob.marvelapi.client.apis

import com.botob.marvelapi.client.infrastructure.*
import com.botob.marvelapi.client.models.Comic
import com.botob.marvelapi.client.models.ComicDataContainer
import com.botob.marvelapi.client.models.ComicDataWrapper
import java.security.MessageDigest

class MarvelApi(private val privateKey: String, private val publicKey: String, basePath: String = "http://gateway.marvel.com/") : ApiClient(basePath) {
    /**
     * Fetches lists of events filtered by a character id.
     * Fetches lists of events in which a specific character appears, with optional filters. See notes on individual parameters below.
     * @param characterId The character ID.
     * @param name Filter the event list by name. (optional)
     * @param nameStartsWith Return events with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only events which have been modified since the specified date. (optional)
     * @param creators Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param series Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     * @param comics Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param stories Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCharacterEventsCollection(characterId: Int, name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, creators: Array<Int>? = null, series: Array<Int>? = null, comics: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "creators" to toMultiValue(creators!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "comics" to toMultiValue(comics!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/characters/{characterId}/events".replace("{" + "characterId" + "}", "$characterId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches a single character by id.
     * This method fetches a single character resource.  It is the canonical URI for any character resource provided by the API.
     * @param characterId A single character id.
     * @return void
     */
    fun getCharacterIndividual(characterId: Int): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/characters/{characterId}".replace("{" + "characterId" + "}", "$characterId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of series filtered by a character id.
     * Fetches lists of comic series in which a specific character appears, with optional filters. See notes on individual parameters below.
     * @param characterId The character ID
     * @param title Filter by series title. (optional)
     * @param titleStartsWith Return series with titles that begin with the specified string (e.g. Sp). (optional)
     * @param startYear Return only series matching the specified start year. (optional)
     * @param modifiedSince Return only series which have been modified since the specified date. (optional)
     * @param comics Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     * @param stories Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param events Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     * @param creators Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param seriesType Filter the series by publication frequency type. (optional)
     * @param contains Return only series containing one or more comics with the specified format. (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCharacterSeriesCollection(characterId: Int, title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, stories: Array<Int>? = null, events: Array<Int>? = null, creators: Array<Int>? = null, seriesType: String? = null, contains: Array<String>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "creators" to toMultiValue(creators!!.toList(), "csv"), "seriesType" to listOf("$seriesType"), "contains" to toMultiValue(contains!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/characters/{characterId}/series".replace("{" + "characterId" + "}", "$characterId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of stories filtered by a character id.
     * Fetches lists of comic stories  featuring a specific character with optional filters. See notes on individual parameters below.
     * @param characterId The character ID.
     * @param modifiedSince Return only stories which have been modified since the specified date. (optional)
     * @param comics Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     * @param series Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     * @param creators Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCharacterStoryCollection(characterId: Int, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, creators: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "creators" to toMultiValue(creators!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/characters/{characterId}/stories".replace("{" + "characterId" + "}", "$characterId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of characters filtered by a comic id.
     * Fetches lists of characters which appear in a specific comic with optional filters. See notes on individual parameters below.
     * @param comicId The comic id.
     * @param name Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     * @param nameStartsWith Return characters with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only characters which have been modified since the specified date. (optional)
     * @param series Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param stories Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getComicCharacterCollection(comicId: Int, name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, series: Array<Int>? = null, events: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/comics/{comicId}/characters".replace("{" + "comicId" + "}", "$comicId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches a single comic by id.
     * This method fetches a single comic resource.  It is the canonical URI for any comic resource provided by the API.
     * @param comicId A single comic.
     * @return void
     */
    fun getComicIndividual(comicId: Int): ComicDataWrapper? {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/comics/$comicId",
                query = createQueryMap()
        )
        val response = request<ComicDataWrapper>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComicDataWrapper
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of stories filtered by a comic id.
     * Fetches lists of comic stories in a specific comic issue, with optional filters. See notes on individual parameters below.
     * @param comicId The comic ID.
     * @param modifiedSince Return only stories which have been modified since the specified date. (optional)
     * @param series Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     * @param creators Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources. (optional)
     * @return void
     */
    fun getComicStoryCollection(comicId: Int, modifiedSince: java.time.LocalDateTime? = null, series: Array<Int>? = null, events: Array<Int>? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("modifiedSince" to listOf("$modifiedSince"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/comics/{comicId}/stories".replace("{" + "comicId" + "}", "$comicId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of comics filtered by a character id.
     * Fetches lists of comics containing a specific character, with optional filters. See notes on individual parameters below.
     * @param characterId The character id.
     * @param format Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     * @param formatType Filter by the issue format type (comic or collection). (optional)
     * @param noVariants Exclude variant comics from the result set. (optional)
     * @param dateDescriptor Return comics within a predefined date range. (optional)
     * @param dateRange Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     * @param title Return only issues in series whose title matches the input. (optional)
     * @param titleStartsWith Return only issues in series whose title starts with the input. (optional)
     * @param startYear Return only issues in series whose start year matches the input. (optional)
     * @param issueNumber Return only issues in series whose issue number matches the input. (optional)
     * @param diamondCode Filter by diamond code. (optional)
     * @param digitalId Filter by digital comic id. (optional)
     * @param upc Filter by UPC. (optional)
     * @param isbn Filter by ISBN. (optional)
     * @param ean Filter by EAN. (optional)
     * @param issn Filter by ISSN. (optional)
     * @param hasDigitalIssue Include only results which are available digitally. (optional)
     * @param modifiedSince Return only comics which have been modified since the specified date. (optional)
     * @param creators Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param series Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param stories Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param sharedAppearances Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     * @param collaborators Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getComicsCharacterCollection(characterId: Int, format: String? = null, formatType: String? = null, noVariants: Boolean? = null, dateDescriptor: String? = null, dateRange: Array<Int>? = null, title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, issueNumber: Int? = null, diamondCode: String? = null, digitalId: Int? = null, upc: String? = null, isbn: String? = null, ean: String? = null, issn: String? = null, hasDigitalIssue: Boolean? = null, modifiedSince: java.time.LocalDateTime? = null, creators: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, stories: Array<Int>? = null, sharedAppearances: Array<Int>? = null, collaborators: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("format" to listOf("$format"), "formatType" to listOf("$formatType"), "noVariants" to listOf("$noVariants"), "dateDescriptor" to listOf("$dateDescriptor"), "dateRange" to toMultiValue(dateRange!!.toList(), "csv"), "title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "issueNumber" to listOf("$issueNumber"), "diamondCode" to listOf("$diamondCode"), "digitalId" to listOf("$digitalId"), "upc" to listOf("$upc"), "isbn" to listOf("$isbn"), "ean" to listOf("$ean"), "issn" to listOf("$issn"), "hasDigitalIssue" to listOf("$hasDigitalIssue"), "modifiedSince" to listOf("$modifiedSince"), "creators" to toMultiValue(creators!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "sharedAppearances" to toMultiValue(sharedAppearances!!.toList(), "csv"), "collaborators" to toMultiValue(collaborators!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/characters/{characterId}/comics".replace("{" + "characterId" + "}", "$characterId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of comics filtered by a creator id.
     * Fetches lists of comics in which the work of a specific creator appears, with optional filters. See notes on individual parameters below.
     * @param creatorId The creator ID.
     * @param format Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     * @param formatType Filter by the issue format type (comic or collection). (optional)
     * @param noVariants Exclude variant comics from the result set. (optional)
     * @param dateDescriptor Return comics within a predefined date range. (optional)
     * @param dateRange Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     * @param title Return only issues in series whose title matches the input. (optional)
     * @param titleStartsWith Return only issues in series whose title starts with the input. (optional)
     * @param startYear Return only issues in series whose start year matches the input. (optional)
     * @param issueNumber Return only issues in series whose issue number matches the input. (optional)
     * @param diamondCode Filter by diamond code. (optional)
     * @param digitalId Filter by digital comic id. (optional)
     * @param upc Filter by UPC. (optional)
     * @param isbn Filter by ISBN. (optional)
     * @param ean Filter by EAN. (optional)
     * @param issn Filter by ISSN. (optional)
     * @param hasDigitalIssue Include only results which are available digitally. (optional)
     * @param modifiedSince Return only comics which have been modified since the specified date. (optional)
     * @param characters Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param series Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param stories Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param sharedAppearances Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     * @param collaborators Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getComicsCollection(creatorId: Int, format: String? = null, formatType: String? = null, noVariants: Boolean? = null, dateDescriptor: String? = null, dateRange: Array<Int>? = null, title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, issueNumber: Int? = null, diamondCode: String? = null, digitalId: Int? = null, upc: String? = null, isbn: String? = null, ean: String? = null, issn: String? = null, hasDigitalIssue: Array<Boolean>? = null, modifiedSince: java.time.LocalDateTime? = null, characters: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, stories: Array<Int>? = null, sharedAppearances: Array<Int>? = null, collaborators: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("format" to listOf("$format"), "formatType" to listOf("$formatType"), "noVariants" to listOf("$noVariants"), "dateDescriptor" to listOf("$dateDescriptor"), "dateRange" to toMultiValue(dateRange!!.toList(), "csv"), "title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "issueNumber" to listOf("$issueNumber"), "diamondCode" to listOf("$diamondCode"), "digitalId" to listOf("$digitalId"), "upc" to listOf("$upc"), "isbn" to listOf("$isbn"), "ean" to listOf("$ean"), "issn" to listOf("$issn"), "hasDigitalIssue" to toMultiValue(hasDigitalIssue!!.toList(), "csv"), "modifiedSince" to listOf("$modifiedSince"), "characters" to toMultiValue(characters!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "sharedAppearances" to toMultiValue(sharedAppearances!!.toList(), "csv"), "collaborators" to toMultiValue(collaborators!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/creators/{creatorId}/comics".replace("{" + "creatorId" + "}", "$creatorId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of comics filtered by an event id.
     * Fetches lists of comics which take place during a specific event, with optional filters. See notes on individual parameters below.
     * @param eventId The event id.
     * @param format Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     * @param formatType Filter by the issue format type (comic or collection). (optional)
     * @param noVariants Exclude variant comics from the result set. (optional)
     * @param dateDescriptor Return comics within a predefined date range. (optional)
     * @param dateRange Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     * @param title Return only issues in series whose title matches the input. (optional)
     * @param titleStartsWith Return only issues in series whose title starts with the input. (optional)
     * @param startYear Return only issues in series whose start year matches the input. (optional)
     * @param issueNumber Return only issues in series whose issue number matches the input. (optional)
     * @param diamondCode Filter by diamond code. (optional)
     * @param digitalId Filter by digital comic id. (optional)
     * @param upc Filter by UPC. (optional)
     * @param isbn Filter by ISBN. (optional)
     * @param ean Filter by EAN. (optional)
     * @param issn Filter by ISSN. (optional)
     * @param hasDigitalIssue Include only results which are available digitally. (optional)
     * @param modifiedSince Return only comics which have been modified since the specified date. (optional)
     * @param creators Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param series Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param stories Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param sharedAppearances Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     * @param collaborators Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getComicsCollection_0(eventId: Int, format: String? = null, formatType: String? = null, noVariants: Array<Boolean>? = null, dateDescriptor: Array<String>? = null, dateRange: Array<Int>? = null, title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, issueNumber: Int? = null, diamondCode: String? = null, digitalId: Int? = null, upc: String? = null, isbn: String? = null, ean: String? = null, issn: String? = null, hasDigitalIssue: Array<Boolean>? = null, modifiedSince: java.time.LocalDateTime? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, stories: Array<Int>? = null, sharedAppearances: Array<Int>? = null, collaborators: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("format" to listOf("$format"), "formatType" to listOf("$formatType"), "noVariants" to toMultiValue(noVariants!!.toList(), "csv"), "dateDescriptor" to toMultiValue(dateDescriptor!!.toList(), "csv"), "dateRange" to toMultiValue(dateRange!!.toList(), "csv"), "title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "issueNumber" to listOf("$issueNumber"), "diamondCode" to listOf("$diamondCode"), "digitalId" to listOf("$digitalId"), "upc" to listOf("$upc"), "isbn" to listOf("$isbn"), "ean" to listOf("$ean"), "issn" to listOf("$issn"), "hasDigitalIssue" to toMultiValue(hasDigitalIssue!!.toList(), "csv"), "modifiedSince" to listOf("$modifiedSince"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "sharedAppearances" to toMultiValue(sharedAppearances!!.toList(), "csv"), "collaborators" to toMultiValue(collaborators!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/events/{eventId}/comics".replace("{" + "eventId" + "}", "$eventId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of comics filtered by a series id.
     * Fetches lists of comics which are published as part of a specific series, with optional filters. See notes on individual parameters below.
     * @param seriesId The series ID.
     * @param format Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     * @param formatType Filter by the issue format type (comic or collection). (optional)
     * @param noVariants Exclude variant comics from the result set. (optional)
     * @param dateDescriptor Return comics within a predefined date range. (optional)
     * @param dateRange Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     * @param title Return only issues in series whose title matches the input. (optional)
     * @param titleStartsWith Return only issues in series whose title starts with the input. (optional)
     * @param startYear Return only issues in series whose start year matches the input. (optional)
     * @param issueNumber Return only issues in series whose issue number matches the input. (optional)
     * @param diamondCode Filter by diamond code. (optional)
     * @param digitalId Filter by digital comic id. (optional)
     * @param upc Filter by UPC. (optional)
     * @param isbn Filter by ISBN. (optional)
     * @param ean Filter by EAN. (optional)
     * @param issn Filter by ISSN. (optional)
     * @param hasDigitalIssue Include only results which are available digitally. (optional)
     * @param modifiedSince Return only comics which have been modified since the specified date. (optional)
     * @param creators Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param events Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param stories Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param sharedAppearances Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     * @param collaborators Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getComicsCollection_1(seriesId: Int, format: String? = null, formatType: String? = null, noVariants: Array<Boolean>? = null, dateDescriptor: Array<String>? = null, dateRange: Array<Int>? = null, title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, issueNumber: Int? = null, diamondCode: String? = null, digitalId: Int? = null, upc: String? = null, isbn: String? = null, ean: String? = null, issn: String? = null, hasDigitalIssue: Array<Boolean>? = null, modifiedSince: java.time.LocalDateTime? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, events: Array<Int>? = null, stories: Array<Int>? = null, sharedAppearances: Array<Int>? = null, collaborators: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("format" to listOf("$format"), "formatType" to listOf("$formatType"), "noVariants" to toMultiValue(noVariants!!.toList(), "csv"), "dateDescriptor" to toMultiValue(dateDescriptor!!.toList(), "csv"), "dateRange" to toMultiValue(dateRange!!.toList(), "csv"), "title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "issueNumber" to listOf("$issueNumber"), "diamondCode" to listOf("$diamondCode"), "digitalId" to listOf("$digitalId"), "upc" to listOf("$upc"), "isbn" to listOf("$isbn"), "ean" to listOf("$ean"), "issn" to listOf("$issn"), "hasDigitalIssue" to toMultiValue(hasDigitalIssue!!.toList(), "csv"), "modifiedSince" to listOf("$modifiedSince"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "sharedAppearances" to toMultiValue(sharedAppearances!!.toList(), "csv"), "collaborators" to toMultiValue(collaborators!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/series/{seriesId}/comics".replace("{" + "seriesId" + "}", "$seriesId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of comics.
     * Fetches lists of comics with optional filters. See notes on individual parameters below.
     * @param format Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     * @param formatType Filter by the issue format type (comic or collection). (optional)
     * @param noVariants Exclude variants (alternate covers, secondary printings, director&#x27;s cuts, etc.) from the result set. (optional)
     * @param dateDescriptor Return comics within a predefined date range. (optional)
     * @param dateRange Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     * @param title Return only issues in series whose title matches the input. (optional)
     * @param titleStartsWith Return only issues in series whose title starts with the input. (optional)
     * @param startYear Return only issues in series whose start year matches the input. (optional)
     * @param issueNumber Return only issues in series whose issue number matches the input. (optional)
     * @param diamondCode Filter by diamond code. (optional)
     * @param digitalId Filter by digital comic id. (optional)
     * @param upc Filter by UPC. (optional)
     * @param isbn Filter by ISBN. (optional)
     * @param ean Filter by EAN. (optional)
     * @param issn Filter by ISSN. (optional)
     * @param hasDigitalIssue Include only results which are available digitally. (optional)
     * @param modifiedSince Return only comics which have been modified since the specified date. (optional)
     * @param creators Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param series Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param stories Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param sharedAppearances Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). Accepts a comma-separated list of ids. (optional)
     * @param collaborators Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). Accepts a comma-separated list of ids. (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getComicsCollection_2(format: String? = null, formatType: String? = null, noVariants: Boolean? = null, dateDescriptor: String? = null, dateRange: Array<Int>? = null, title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, issueNumber: Int? = null, diamondCode: String? = null, digitalId: Int? = null, upc: String? = null, isbn: String? = null, ean: String? = null, issn: String? = null, hasDigitalIssue: Boolean? = null, modifiedSince: java.time.LocalDateTime? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, stories: Array<Int>? = null, sharedAppearances: Array<Int>? = null, collaborators: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("format" to listOf("$format"), "formatType" to listOf("$formatType"), "noVariants" to listOf("$noVariants"), "dateDescriptor" to listOf("$dateDescriptor"), "dateRange" to toMultiValue(dateRange!!.toList(), "csv"), "title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "issueNumber" to listOf("$issueNumber"), "diamondCode" to listOf("$diamondCode"), "digitalId" to listOf("$digitalId"), "upc" to listOf("$upc"), "isbn" to listOf("$isbn"), "ean" to listOf("$ean"), "issn" to listOf("$issn"), "hasDigitalIssue" to listOf("$hasDigitalIssue"), "modifiedSince" to listOf("$modifiedSince"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "sharedAppearances" to toMultiValue(sharedAppearances!!.toList(), "csv"), "collaborators" to toMultiValue(collaborators!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/comics", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of comics filtered by a story id.
     * Fetches lists of comics in which a specific story appears, with optional filters. See notes on individual parameters below.
     * @param storyId The story ID.
     * @param format Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     * @param formatType Filter by the issue format type (comic or collection). (optional)
     * @param noVariants Exclude variant comics from the result set. (optional)
     * @param dateDescriptor Return comics within a predefined date range. (optional)
     * @param dateRange Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     * @param title Return only issues in series whose title matches the input. (optional)
     * @param titleStartsWith Return only issues in series whose title starts with the input. (optional)
     * @param startYear Return only issues in series whose start year matches the input. (optional)
     * @param issueNumber Return only issues in series whose issue number matches the input. (optional)
     * @param diamondCode Filter by diamond code. (optional)
     * @param digitalId Filter by digital comic id. (optional)
     * @param upc Filter by UPC. (optional)
     * @param isbn Filter by ISBN. (optional)
     * @param ean Filter by EAN. (optional)
     * @param issn Filter by ISSN. (optional)
     * @param hasDigitalIssue Include only results which are available digitally. (optional)
     * @param modifiedSince Return only comics which have been modified since the specified date. (optional)
     * @param creators Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param series Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param sharedAppearances Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     * @param collaborators Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getComicsCollection_3(storyId: Int, format: String? = null, formatType: String? = null, noVariants: Array<Boolean>? = null, dateDescriptor: Array<String>? = null, dateRange: Array<Int>? = null, title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, issueNumber: Int? = null, diamondCode: String? = null, digitalId: Int? = null, upc: String? = null, isbn: String? = null, ean: String? = null, issn: String? = null, hasDigitalIssue: Array<Boolean>? = null, modifiedSince: java.time.LocalDateTime? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, sharedAppearances: Array<Int>? = null, collaborators: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("format" to listOf("$format"), "formatType" to listOf("$formatType"), "noVariants" to toMultiValue(noVariants!!.toList(), "csv"), "dateDescriptor" to toMultiValue(dateDescriptor!!.toList(), "csv"), "dateRange" to toMultiValue(dateRange!!.toList(), "csv"), "title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "issueNumber" to listOf("$issueNumber"), "diamondCode" to listOf("$diamondCode"), "digitalId" to listOf("$digitalId"), "upc" to listOf("$upc"), "isbn" to listOf("$isbn"), "ean" to listOf("$ean"), "issn" to listOf("$issn"), "hasDigitalIssue" to toMultiValue(hasDigitalIssue!!.toList(), "csv"), "modifiedSince" to listOf("$modifiedSince"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "sharedAppearances" to toMultiValue(sharedAppearances!!.toList(), "csv"), "collaborators" to toMultiValue(collaborators!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/stories/{storyId}/comics".replace("{" + "storyId" + "}", "$storyId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of creators.
     * Fetches lists of comic creators with optional filters. See notes on individual parameters below.
     * @param firstName Filter by creator first name (e.g. Brian). (optional)
     * @param middleName Filter by creator middle name (e.g. Michael). (optional)
     * @param lastName Filter by creator last name (e.g. Bendis). (optional)
     * @param suffix Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     * @param nameStartsWith Filter by creator names that match critera (e.g. B, St L). (optional)
     * @param firstNameStartsWith Filter by creator first names that match critera (e.g. B, St L). (optional)
     * @param middleNameStartsWith Filter by creator middle names that match critera (e.g. Mi). (optional)
     * @param lastNameStartsWith Filter by creator last names that match critera (e.g. Ben). (optional)
     * @param modifiedSince Return only creators which have been modified since the specified date. (optional)
     * @param comics Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param series Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param stories Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCreatorCollection(firstName: String? = null, middleName: String? = null, lastName: String? = null, suffix: String? = null, nameStartsWith: String? = null, firstNameStartsWith: String? = null, middleNameStartsWith: String? = null, lastNameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("firstName" to listOf("$firstName"), "middleName" to listOf("$middleName"), "lastName" to listOf("$lastName"), "suffix" to listOf("$suffix"), "nameStartsWith" to listOf("$nameStartsWith"), "firstNameStartsWith" to listOf("$firstNameStartsWith"), "middleNameStartsWith" to listOf("$middleNameStartsWith"), "lastNameStartsWith" to listOf("$lastNameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/creators", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of characters filtered by a story id.
     * Fetches lists of comic characters appearing in a single story, with optional filters. See notes on individual parameters below.
     * @param storyId The story ID.
     * @param name Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     * @param nameStartsWith Return characters with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only characters which have been modified since the specified date. (optional)
     * @param comics Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param series Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCreatorCollection_0(storyId: Int, name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/stories/{storyId}/characters".replace("{" + "storyId" + "}", "$storyId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of creators filtered by a series id.
     * Fetches lists of comic creators whose work appears in a specific series, with optional filters. See notes on individual parameters below.
     * @param seriesId The series ID.
     * @param firstName Filter by creator first name (e.g. brian). (optional)
     * @param middleName Filter by creator middle name (e.g. Michael). (optional)
     * @param lastName Filter by creator last name (e.g. Bendis). (optional)
     * @param suffix Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     * @param nameStartsWith Filter by creator names that match critera (e.g. B, St L). (optional)
     * @param firstNameStartsWith Filter by creator first names that match critera (e.g. B, St L). (optional)
     * @param middleNameStartsWith Filter by creator middle names that match critera (e.g. Mi). (optional)
     * @param lastNameStartsWith Filter by creator last names that match critera (e.g. Ben). (optional)
     * @param modifiedSince Return only creators which have been modified since the specified date. (optional)
     * @param comics Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param events Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param stories Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCreatorCollection_1(seriesId: Int, firstName: String? = null, middleName: String? = null, lastName: String? = null, suffix: String? = null, nameStartsWith: String? = null, firstNameStartsWith: String? = null, middleNameStartsWith: String? = null, lastNameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, events: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("firstName" to listOf("$firstName"), "middleName" to listOf("$middleName"), "lastName" to listOf("$lastName"), "suffix" to listOf("$suffix"), "nameStartsWith" to listOf("$nameStartsWith"), "firstNameStartsWith" to listOf("$firstNameStartsWith"), "middleNameStartsWith" to listOf("$middleNameStartsWith"), "lastNameStartsWith" to listOf("$lastNameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/series/{seriesId}/creators".replace("{" + "seriesId" + "}", "$seriesId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of creators filtered by a comic id.
     * Fetches lists of comic creators whose work appears in a specific comic, with optional filters. See notes on individual parameters below.
     * @param comicId The comic id.
     * @param firstName Filter by creator first name (e.g. brian). (optional)
     * @param middleName Filter by creator middle name (e.g. Michael). (optional)
     * @param lastName Filter by creator last name (e.g. Bendis). (optional)
     * @param suffix Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     * @param nameStartsWith Filter by creator names that match critera (e.g. B, St L). (optional)
     * @param firstNameStartsWith Filter by creator first names that match critera (e.g. B, St L). (optional)
     * @param middleNameStartsWith Filter by creator middle names that match critera (e.g. Mi). (optional)
     * @param lastNameStartsWith Filter by creator last names that match critera (e.g. Ben). (optional)
     * @param modifiedSince Return only creators which have been modified since the specified date. (optional)
     * @param comics Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param series Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     * @param stories Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCreatorCollection_2(comicId: Int, firstName: String? = null, middleName: String? = null, lastName: String? = null, suffix: String? = null, nameStartsWith: String? = null, firstNameStartsWith: String? = null, middleNameStartsWith: String? = null, lastNameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("firstName" to listOf("$firstName"), "middleName" to listOf("$middleName"), "lastName" to listOf("$lastName"), "suffix" to listOf("$suffix"), "nameStartsWith" to listOf("$nameStartsWith"), "firstNameStartsWith" to listOf("$firstNameStartsWith"), "middleNameStartsWith" to listOf("$middleNameStartsWith"), "lastNameStartsWith" to listOf("$lastNameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/comics/{comicId}/creators".replace("{" + "comicId" + "}", "$comicId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of characters.
     * Fetches lists of comic characters with optional filters. See notes on individual parameters below.
     * @param name Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     * @param nameStartsWith Return characters with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only characters which have been modified since the specified date. (optional)
     * @param comics Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param series Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only characters which appear in the specified events (accepts a comma-separated list of ids). (optional)
     * @param stories Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCreatorCollection_3(name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/characters", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of creators filtered by a story id.
     * Fetches lists of comic creators whose work appears in a specific story, with optional filters. See notes on individual parameters below.
     * @param storyId The story ID.
     * @param firstName Filter by creator first name (e.g. brian). (optional)
     * @param middleName Filter by creator middle name (e.g. Michael). (optional)
     * @param lastName Filter by creator last name (e.g. Bendis). (optional)
     * @param suffix Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     * @param nameStartsWith Filter by creator names that match critera (e.g. B, St L). (optional)
     * @param firstNameStartsWith Filter by creator first names that match critera (e.g. B, St L). (optional)
     * @param middleNameStartsWith Filter by creator middle names that match critera (e.g. Mi). (optional)
     * @param lastNameStartsWith Filter by creator last names that match critera (e.g. Ben). (optional)
     * @param modifiedSince Return only creators which have been modified since the specified date. (optional)
     * @param comics Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param series Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCreatorCollection_4(storyId: Int, firstName: String? = null, middleName: String? = null, lastName: String? = null, suffix: String? = null, nameStartsWith: String? = null, firstNameStartsWith: String? = null, middleNameStartsWith: String? = null, lastNameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("firstName" to listOf("$firstName"), "middleName" to listOf("$middleName"), "lastName" to listOf("$lastName"), "suffix" to listOf("$suffix"), "nameStartsWith" to listOf("$nameStartsWith"), "firstNameStartsWith" to listOf("$firstNameStartsWith"), "middleNameStartsWith" to listOf("$middleNameStartsWith"), "lastNameStartsWith" to listOf("$lastNameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/stories/{storyId}/creators".replace("{" + "storyId" + "}", "$storyId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of creators filtered by an event id.
     * Fetches lists of comic creators whose work appears in a specific event, with optional filters. See notes on individual parameters below.
     * @param eventId The event ID.
     * @param firstName Filter by creator first name (e.g. brian). (optional)
     * @param middleName Filter by creator middle name (e.g. Michael). (optional)
     * @param lastName Filter by creator last name (e.g. Bendis). (optional)
     * @param suffix Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     * @param nameStartsWith Filter by creator names that match critera (e.g. B, St L). (optional)
     * @param firstNameStartsWith Filter by creator first names that match critera (e.g. B, St L). (optional)
     * @param middleNameStartsWith Filter by creator middle names that match critera (e.g. Mi). (optional)
     * @param lastNameStartsWith Filter by creator last names that match critera (e.g. Ben). (optional)
     * @param modifiedSince Return only creators which have been modified since the specified date. (optional)
     * @param comics Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param series Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     * @param stories Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCreatorCollection_5(eventId: Int, firstName: String? = null, middleName: String? = null, lastName: String? = null, suffix: String? = null, nameStartsWith: String? = null, firstNameStartsWith: String? = null, middleNameStartsWith: String? = null, lastNameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("firstName" to listOf("$firstName"), "middleName" to listOf("$middleName"), "lastName" to listOf("$lastName"), "suffix" to listOf("$suffix"), "nameStartsWith" to listOf("$nameStartsWith"), "firstNameStartsWith" to listOf("$firstNameStartsWith"), "middleNameStartsWith" to listOf("$middleNameStartsWith"), "lastNameStartsWith" to listOf("$lastNameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/events/{eventId}/creators".replace("{" + "eventId" + "}", "$eventId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of events filtered by a creator id.
     * Fetches lists of events featuring the work of a specific creator with optional filters. See notes on individual parameters below.
     * @param creatorId The creator ID.
     * @param name Filter the event list by name. (optional)
     * @param nameStartsWith Return events with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only events which have been modified since the specified date. (optional)
     * @param characters Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param series Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     * @param comics Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param stories Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCreatorEventsCollection(creatorId: Int, name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, characters: Array<Int>? = null, series: Array<Int>? = null, comics: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "characters" to toMultiValue(characters!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "comics" to toMultiValue(comics!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/creators/{creatorId}/events".replace("{" + "creatorId" + "}", "$creatorId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches a single creator by id.
     * This method fetches a single creator resource.  It is the canonical URI for any creator resource provided by the API.
     * @param creatorId A single creator id.
     * @return void
     */
    fun getCreatorIndividual(creatorId: Int): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/creators/{creatorId}".replace("{" + "creatorId" + "}", "$creatorId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of series filtered by a creator id.
     * Fetches lists of comic series in which a specific creator&#x27;s work appears, with optional filters. See notes on individual parameters below.
     * @param creatorId The creator ID.
     * @param title Filter by series title. (optional)
     * @param titleStartsWith Return series with titles that begin with the specified string (e.g. Sp). (optional)
     * @param startYear Return only series matching the specified start year. (optional)
     * @param modifiedSince Return only series which have been modified since the specified date. (optional)
     * @param comics Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     * @param stories Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param events Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     * @param characters Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param seriesType Filter the series by publication frequency type. (optional)
     * @param contains Return only series containing one or more comics with the specified format. (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCreatorSeriesCollection(creatorId: Int, title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, stories: Array<Int>? = null, events: Array<Int>? = null, characters: Array<Int>? = null, seriesType: String? = null, contains: Array<String>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "seriesType" to listOf("$seriesType"), "contains" to toMultiValue(contains!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/creators/{creatorId}/series".replace("{" + "creatorId" + "}", "$creatorId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of stories filtered by a creator id.
     * Fetches lists of comic stories by a specific creator with optional filters. See notes on individual parameters below.
     * @param creatorId The ID of the creator.
     * @param modifiedSince Return only stories which have been modified since the specified date. (optional)
     * @param comics Return only stories contained in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param series Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     * @param characters Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getCreatorStoryCollection(creatorId: Int, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, characters: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/creators/{creatorId}/stories".replace("{" + "creatorId" + "}", "$creatorId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of characters filtered by an event id.
     * Fetches lists of characters which appear in a specific event, with optional filters. See notes on individual parameters below.
     * @param eventId The event ID
     * @param name Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     * @param nameStartsWith Return characters with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only characters which have been modified since the specified date. (optional)
     * @param comics Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param series Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     * @param stories Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getEventCharacterCollection(eventId: Int, name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/events/{eventId}/characters".replace("{" + "eventId" + "}", "$eventId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches a single event by id.
     * This method fetches a single event resource.  It is the canonical URI for any event resource provided by the API.
     * @param eventId A single event.
     * @return void
     */
    fun getEventIndividual(eventId: Int): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/events/{eventId}".replace("{" + "eventId" + "}", "$eventId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of series filtered by an event id.
     * Fetches lists of comic series in which a specific event takes place, with optional filters. See notes on individual parameters below.
     * @param eventId The event ID.
     * @param title Filter by series title. (optional)
     * @param titleStartsWith Return series with titles that begin with the specified string (e.g. Sp). (optional)
     * @param startYear Return only series matching the specified start year. (optional)
     * @param modifiedSince Return only series which have been modified since the specified date. (optional)
     * @param comics Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     * @param stories Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param creators Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param seriesType Filter the series by publication frequency type. (optional)
     * @param contains Return only series containing one or more comics with the specified format. (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getEventSeriesCollection(eventId: Int, title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, stories: Array<Int>? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, seriesType: String? = null, contains: Array<String>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "seriesType" to listOf("$seriesType"), "contains" to toMultiValue(contains!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/events/{eventId}/series".replace("{" + "eventId" + "}", "$eventId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of stories filtered by an event id.
     * Fetches lists of comic stories from a specific event, with optional filters. See notes on individual parameters below.
     * @param eventId The ID of the event.
     * @param modifiedSince Return only stories which have been modified since the specified date. (optional)
     * @param comics Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     * @param series Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     * @param creators Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getEventStoryCollection(eventId: Int, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/events/{eventId}/stories".replace("{" + "eventId" + "}", "$eventId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of events filtered by a story id.
     * Fetches lists of events in which a specific story appears, with optional filters. See notes on individual parameters below.
     * @param storyId The story ID.
     * @param name Filter the event list by name. (optional)
     * @param nameStartsWith Return events with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only events which have been modified since the specified date. (optional)
     * @param creators Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param series Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     * @param comics Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getEventsCollection(storyId: Int, name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, series: Array<Int>? = null, comics: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "comics" to toMultiValue(comics!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/stories/{storyId}/events".replace("{" + "storyId" + "}", "$storyId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of events filtered by a series id.
     * Fetches lists of events which occur in a specific series, with optional filters. See notes on individual parameters below.
     * @param seriesId The series ID.
     * @param name Filter the event list by name. (optional)
     * @param nameStartsWith Return events with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only events which have been modified since the specified date. (optional)
     * @param creators Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param comics Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param stories Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getEventsCollection_0(seriesId: Int, name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, comics: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "comics" to toMultiValue(comics!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/series/{seriesId}/events".replace("{" + "seriesId" + "}", "$seriesId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of events.
     * Fetches lists of events with optional filters. See notes on individual parameters below.
     * @param name Return only events which match the specified name. (optional)
     * @param nameStartsWith Return events with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only events which have been modified since the specified date. (optional)
     * @param creators Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param series Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     * @param comics Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param stories Return only events which take place in the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getEventsCollection_1(name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, series: Array<Int>? = null, comics: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "comics" to toMultiValue(comics!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/events", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of events filtered by a comic id.
     * Fetches lists of events in which a specific comic appears, with optional filters. See notes on individual parameters below.
     * @param comicId The comic ID.
     * @param name Filter the event list by name. (optional)
     * @param nameStartsWith Return events with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only events which have been modified since the specified date. (optional)
     * @param creators Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param series Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     * @param stories Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getIssueEventsCollection(comicId: Int, name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, series: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/comics/{comicId}/events".replace("{" + "comicId" + "}", "$comicId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of characters filtered by a series id.
     * Fetches lists of characters which appear in specific series, with optional filters. See notes on individual parameters below.
     * @param seriesId The series id.
     * @param name Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     * @param nameStartsWith Return characters with names that begin with the specified string (e.g. Sp). (optional)
     * @param modifiedSince Return only characters which have been modified since the specified date. (optional)
     * @param comics Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     * @param events Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     * @param stories Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getSeriesCharacterWrapper(seriesId: Int, name: String? = null, nameStartsWith: String? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, events: Array<Int>? = null, stories: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "nameStartsWith" to listOf("$nameStartsWith"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/series/{seriesId}/characters".replace("{" + "seriesId" + "}", "$seriesId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of series.
     * Fetches lists of comic series with optional filters. See notes on individual parameters below.
     * @param title Return only series matching the specified title. (optional)
     * @param titleStartsWith Return series with titles that begin with the specified string (e.g. Sp). (optional)
     * @param startYear Return only series matching the specified start year. (optional)
     * @param modifiedSince Return only series which have been modified since the specified date. (optional)
     * @param comics Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     * @param stories Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     * @param events Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     * @param creators Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param seriesType Filter the series by publication frequency type. (optional)
     * @param contains Return only series containing one or more comics with the specified format. (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getSeriesCollection(title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, stories: Array<Int>? = null, events: Array<Int>? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, seriesType: String? = null, contains: Array<String>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "stories" to toMultiValue(stories!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "seriesType" to listOf("$seriesType"), "contains" to toMultiValue(contains!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/series", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches a single comic series by id.
     * This method fetches a single comic series resource.  It is the canonical URI for any comic series resource provided by the API.
     * @param seriesId Filter by series title.
     * @return void
     */
    fun getSeriesIndividual(seriesId: Int): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/series/{seriesId}".replace("{" + "seriesId" + "}", "$seriesId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of stories filtered by a series id.
     * Fetches lists of comic stories from a specific series with optional filters. See notes on individual parameters below.
     * @param seriesId The series ID.
     * @param modifiedSince Return only stories which have been modified since the specified date. (optional)
     * @param comics Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     * @param events Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     * @param creators Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getSeriesStoryCollection(seriesId: Int, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, events: Array<Int>? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/series/{seriesId}/stories".replace("{" + "seriesId" + "}", "$seriesId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of stories.
     * Fetches lists of comic stories with optional filters. See notes on individual parameters below.
     * @param modifiedSince Return only stories which have been modified since the specified date. (optional)
     * @param comics Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     * @param series Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     * @param events Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     * @param creators Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getStoryCollection(modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, series: Array<Int>? = null, events: Array<Int>? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "series" to toMultiValue(series!!.toList(), "csv"), "events" to toMultiValue(events!!.toList(), "csv"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/stories", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches a single comic story by id.
     * This method fetches a single comic story resource.  It is the canonical URI for any comic story resource provided by the API.
     * @param storyId Filter by story id.
     * @return void
     */
    fun getStoryIndividual(storyId: Int): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/stories/{storyId}".replace("{" + "storyId" + "}", "$storyId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetches lists of series filtered by a story id.
     * Fetches lists of comic series in which the specified story takes place. See notes on individual parameters below.
     * @param storyId The story ID.
     * @param events Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     * @param title Filter by series title. (optional)
     * @param titleStartsWith Return series with titles that begin with the specified string (e.g. Sp). (optional)
     * @param startYear Return only series matching the specified start year. (optional)
     * @param modifiedSince Return only series which have been modified since the specified date. (optional)
     * @param comics Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     * @param creators Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     * @param characters Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     * @param seriesType Filter the series by publication frequency type. (optional)
     * @param contains Return only series containing one or more comics with the specified format. (optional)
     * @param orderBy Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     * @param limit Limit the result set to the specified number of resources. (optional)
     * @param offset Skip the specified number of resources in the result set. (optional)
     * @return void
     */
    fun getStorySeriesCollection(storyId: Int, events: Array<Int>? = null, title: String? = null, titleStartsWith: String? = null, startYear: Int? = null, modifiedSince: java.time.LocalDateTime? = null, comics: Array<Int>? = null, creators: Array<Int>? = null, characters: Array<Int>? = null, seriesType: String? = null, contains: Array<String>? = null, orderBy: Array<String>? = null, limit: Int? = null, offset: Int? = null): Unit {
        val localVariableQuery: MultiValueMap = createQueryMap(mapOf("events" to toMultiValue(events!!.toList(), "csv"), "title" to listOf("$title"), "titleStartsWith" to listOf("$titleStartsWith"), "startYear" to listOf("$startYear"), "modifiedSince" to listOf("$modifiedSince"), "comics" to toMultiValue(comics!!.toList(), "csv"), "creators" to toMultiValue(creators!!.toList(), "csv"), "characters" to toMultiValue(characters!!.toList(), "csv"), "seriesType" to listOf("$seriesType"), "contains" to toMultiValue(contains!!.toList(), "csv"), "orderBy" to toMultiValue(orderBy!!.toList(), "csv"), "limit" to listOf("$limit"), "offset" to listOf("$offset")))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/public/stories/{storyId}/series".replace("{" + "storyId" + "}", "$storyId"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    private fun createQueryMap(specificQueryMap: Map<String, List<String>> = mapOf()): Map<String, List<String>> {
        var timestamp = System.currentTimeMillis().toString()
        return mutableMapOf(
            "apikey" to listOf(publicKey),
            "ts" to listOf(timestamp),
            "hash" to listOf(md5("$timestamp$privateKey$publicKey").toHex())
        ).apply { putAll(specificQueryMap) }
    }

    private fun md5(input: String): ByteArray = MessageDigest.getInstance("MD5").digest(input.toByteArray(Charsets.UTF_8))

    private fun ByteArray.toHex() = joinToString(separator = "") { byte -> "%02x".format(byte) }
}
